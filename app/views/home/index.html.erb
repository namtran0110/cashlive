<br>
<h1>Home Page</h1>

<p>This is the home page, it shows popular streams and stores and is the landing page for anyone who is not logged in</p>
<p>If a user is logged in, the controller will redirect them to "/dashboard", which is the real home page for lugged in users!</p>

<h2>Streaming Now:</h2>
<ul>
  <li>
    <p>No stores are currently streaming</p>
  </li>
</ul>

<article>
        <!-- copy this <section> and next <script> -->
        <section class="experiment">
        <% if @streaming_now %>
          <section style="display: none;">
            <input type="text" id="broadcast-name" value="<%= @stream_name %>" >
            <button id="setup-new-broadcast" class="setup">Setup New Broadcast</button>
          </section>

        <% else %>
          <!-- list of all available broadcasting rooms -->
          <table style="width: 100%;" id="rooms-list"></table>
        <% end %>
          <!-- local/remote videos container -->
          <div id="videos-container"></div>
        </section>

        <script>
            // Muaz Khan     - https://github.com/muaz-khan
            // MIT License   - https://www.webrtc-experiment.com/licence/
            // Documentation - https://github.com/muaz-khan/WebRTC-Experiment/tree/master/webrtc-broadcasting
            var config = {
                openSocket: function(config) {
                    // https://github.com/muaz-khan/WebRTC-Experiment/blob/master/Signaling.md
                    // This method "openSocket" can be defined in HTML page
                    // to use any signaling gateway either XHR-Long-Polling or SIP/XMPP or WebSockets/Socket.io
                    // or WebSync/SignalR or existing implementations like signalmaster/peerserver or sockjs etc.
                    var channel = config.channel || location.href.replace( /\/|:|#|%|\.|\[|\]/g , '');
                    var socket = new Firebase('https://webrtc.firebaseIO.com/' + channel);
                    socket.channel = channel;
                    socket.on("child_added", function(data) {
                        config.onmessage && config.onmessage(data.val());
                    });
                    socket.send = function(data) {
                        this.push(data);
                    };
                    config.onopen && setTimeout(config.onopen, 1);
                    socket.onDisconnect().remove();
                    return socket;
                },
                onRemoteStream: function(htmlElement) {
                    htmlElement.setAttribute('controls', true);
                    videosContainer.insertBefore(htmlElement, videosContainer.firstChild);
                    htmlElement.play();
                    rotateInCircle(htmlElement);
                },
                onRoomFound: function(room) {
                    var alreadyExist = document.querySelector('button[data-broadcaster="' + room.broadcaster + '"]');
                    if (alreadyExist) return;
                    if (typeof roomsList === 'undefined') roomsList = document.body;
                    var tr = document.createElement('tr');
                    tr.innerHTML = '<td><strong>' + room.roomName + '</strong> is broadcasting his media!</td>' +
                        '<td><button class="join">Join</button></td>';
                    roomsList.insertBefore(tr, roomsList.firstChild);
                    var joinRoomButton = tr.querySelector('.join');
                    joinRoomButton.setAttribute('data-broadcaster', room.broadcaster);
                    joinRoomButton.setAttribute('data-roomToken', room.broadcaster);
                    joinRoomButton.onclick = function() {
                        this.disabled = true;
                        var broadcaster = this.getAttribute('data-broadcaster');
                        var roomToken = this.getAttribute('data-roomToken');
                        broadcastUI.joinRoom({
                            roomToken: roomToken,
                            joinUser: broadcaster
                        });
                        hideUnnecessaryStuff();
                    };
                },
                onNewParticipant: function(numberOfViewers) {
                    document.title = 'Viewers: ' + numberOfViewers;
                }
            };
            function setupNewBroadcastButtonClickHandler() {
                document.getElementById('broadcast-name').disabled = true;
                document.getElementById('setup-new-broadcast').disabled = true;
                captureUserMedia(function() {
                    var shared = 'video';
                    if (window.option == 'Only Audio') {
                        shared = 'audio';
                    }
                    if (window.option == 'Screen') {
                        shared = 'screen';
                    }
                    broadcastUI.createRoom({
                        roomName: (document.getElementById('broadcast-name') || { }).value || 'Anonymous',
                        isAudio: shared === 'audio'
                    });
                });
                hideUnnecessaryStuff();
            }
            function captureUserMedia(callback) {
                var constraints = null;
                window.option = broadcastingOption ? broadcastingOption.value : '';
                if (option === 'Only Audio') {
                    constraints = {
                        audio: true,
                        video: false
                    };
                    if(DetectRTC.hasMicrophone !== true) {
                        alert('DetectRTC library is unable to find microphone; maybe you denied microphone access once and it is still denied or maybe microphone device is not attached to your system or another app is using same microphone.');
                    }
                }
                if (option === 'Screen') {
                    var video_constraints = {
                        mandatory: {
                            chromeMediaSource: 'screen'
                        },
                        optional: []
                    };
                    constraints = {
                        audio: false,
                        video: video_constraints
                    };
                    if(DetectRTC.isScreenCapturingSupported !== true) {
                        alert('DetectRTC library is unable to find screen capturing support. You MUST run chrome with command line flag "chrome --enable-usermedia-screen-capturing"');
                    }
                }
                if (option != 'Only Audio' && option != 'Screen' && DetectRTC.hasWebcam !== true) {
                    alert('DetectRTC library is unable to find webcam; maybe you denied webcam access once and it is still denied or maybe webcam device is not attached to your system or another app is using same webcam.');
                }
                var htmlElement = document.createElement(option === 'Only Audio' ? 'audio' : 'video');
                htmlElement.setAttribute('autoplay', true);
                htmlElement.setAttribute('controls', true);
                videosContainer.insertBefore(htmlElement, videosContainer.firstChild);
                var mediaConfig = {
                    video: htmlElement,
                    onsuccess: function(stream) {
                        config.attachStream = stream;
                        callback && callback();
                        htmlElement.setAttribute('muted', true);
                        rotateInCircle(htmlElement);
                    },
                    onerror: function() {
                        if (option === 'Only Audio') alert('unable to get access to your microphone');
                        else if (option === 'Screen') {
                            if (location.protocol === 'http:') alert('Please test this WebRTC experiment on HTTPS.');
                            else alert('Screen capturing is either denied or not supported. Are you enabled flag: "Enable screen capture support in getUserMedia"?');
                        } else alert('unable to get access to your webcam');
                    }
                };
                if (constraints) mediaConfig.constraints = constraints;
                getUserMedia(mediaConfig);
            }
            var broadcastUI = broadcast(config);
            /* UI specific */
            var videosContainer = document.getElementById('videos-container') || document.body;
            var setupNewBroadcast = document.getElementById('setup-new-broadcast');
            var roomsList = document.getElementById('rooms-list');
            var broadcastingOption = document.getElementById('broadcasting-option');
            if (setupNewBroadcast) setupNewBroadcast.onclick = setupNewBroadcastButtonClickHandler;
            function hideUnnecessaryStuff() {
                var visibleElements = document.getElementsByClassName('visible'),
                    length = visibleElements.length;
                for (var i = 0; i < length; i++) {
                    visibleElements[i].style.display = 'none';
                }
            }
            function rotateInCircle(video) {
                video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(0deg)';
                setTimeout(function() {
                    video.style[navigator.mozGetUserMedia ? 'transform' : '-webkit-transform'] = 'rotate(360deg)';
                }, 1000);
            }
        </script>
      </article>

<h2>Popular stores:</h2>
<% if @stores.count > 0 %>
  <ul>
    <% @stores.each do |store| %>
      <li>
        <p><%= store.name %> <%= link_to "view store", store_path(store), class: 'btn btn-secondary btn-small' %></p>
      </li>
    <% end %>
  </ul>
<% else %>
  Sorry there are no stores
<% end %>
